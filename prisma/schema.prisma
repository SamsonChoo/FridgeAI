// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Category {
  id          Int         @id @default(autoincrement())
  name        String      @unique
  description String?
  ingredients IngredientCategory[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Ingredient {
  id             Int                  @id @default(autoincrement())
  name           String
  quantity       Float
  unit           String
  expirationDate DateTime?
  addedDate      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  history        IngredientHistory[]
  nutritionalInfo String?             // Store nutritional information as a string
  categories     IngredientCategory[]
}

model IngredientHistory {
  id           Int        @id @default(autoincrement())
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
  ingredientId Int
  action       String     // ADD, REMOVE, UPDATE
  quantity     Float
  notes        String?
  createdAt    DateTime   @default(now())
}

model IngredientCategory {
  id           Int        @id @default(autoincrement())
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
  ingredientId Int
  category     Category   @relation(fields: [categoryId], references: [id])
  categoryId   Int

  @@unique([ingredientId, categoryId])
}

model RecipeHistory {
  id        String   @id @default(cuid())
  timestamp DateTime @default(now())
  suggestion String
  options   String   // Store options as JSON string
  ingredients String // Store ingredients as JSON string
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
